---
# Yii2 Instalation Advanced
docker run --rm --interactive --tty \
 --volume $PWD:/app \
 --volume ${COMPOSER_HOME:-$HOME/.composer}:/tmp \
 composer create-project --prefer-dist yiisoft/yii2-app-advanced yii2

---
Run (Recommeded for easy start-up)
./run.sh
Build (optional)
If you want build your local docker image instead of pulling from openkb, then do this.
    ---
    ## ./build.sh
---
Yii2 GII Model
yii gii/model --generateQuery=1 --generateRelationsFromCurrentSchema=1 --overwrite=1 --ns='common\models' --modelClass='Product' --tableName='products' --queryNs='common\models\query' --queryClass='ProductQuery'

## yii gii/model --generateQuery=1 --generateRelationsFromCurrentSchema=1 --overwrite=1 --ns='common\models' --modelClass='LaudosDiRaioXText' --tableName='laudos_di_raio_x_text' --queryNs='common\models\query' --queryClass='LaudosDiRaioXTexQuery'
yii gii/model --generateQuery=1 --generateRelationsFromCurrentSchema=1 --overwrite=1 --ns='common\models' --modelClass='LaudosMlPCoproparasitologicoIIText' --tableName='laudos_ml_p_coproparasitologico_ii_text' --queryNs='common\models\query' --queryClass='LaudosMlPCoproparasitologicoIITexQuery'

---
Model
yii gii/model --ns='backend\models' --modelClass='protocolos*' --tableName='protocolos*\*'

DESCRIPTION
This generator generates an ActiveRecord class for the specified database
table.

---

USAGE
yii gii/model [...options...]

---

OPTIONS
--appconfig: string
custom application configuration file path.
If not set, default application configuration is used.

---

--baseClass: string (defaults to 'yii\db\ActiveRecord')
This is the base class of the new ActiveRecord class. It should be a fully
qualified namespaced class name.

---

--color: boolean, 0 or 1
whether to enable ANSI color in the output.
If not set, ANSI color will only be enabled for terminals that support it.

---

--db: string (defaults to 'db')
This is the ID of the DB application component.

---

--enableI18N: boolean, 0 or 1 (defaults to 0)
This indicates whether the generator should generate strings using Yii::t()
method. Set this to true if you are planning to make your application
translatable.

---

--generateJunctionRelationMode: string (defaults to 'table')
This indicates whether junction relations are generated with `viaTable()`
or `via()` (Via Model) relations. Make sure you also generate the junction
models when using the "Via Model" option.

---

--generateLabelsFromComments: boolean, 0 or 1 (defaults to 0)
This indicates whether the generator should generate attribute labels by
using the comments of the corresponding DB columns.

---

--generateQuery: boolean, 0 or 1 (defaults to 0)
This indicates whether to generate ActiveQuery for the ActiveRecord class.

---

--generateRelations: string (defaults to 'all')
This indicates whether the generator should generate relations based on
foreign key constraints it detects in the database. Note that if your
database contains too many tables, you may want to uncheck this option to
accelerate the code generation process.

---

--generateRelationsFromCurrentSchema: boolean, 0 or 1 (defaults to 1)
This indicates whether the generator should generate relations from current
schema or from all available schemas.

---

--help, -h: boolean, 0 or 1 (defaults to 0)
whether to display help information about current command.

---

--interactive: boolean, 0 or 1 (defaults to 1)
whether to run the command interactively.

---

--messageCategory: string (defaults to 'app')
This is the category used by Yii::t() in case you enable I18N.

---

--modelClass: string
This is the name of the ActiveRecord class to be generated. The class name
should not contain the namespace part as it is specified in "Namespace".
You do not need to specify the class name if "Table Name" ends with
asterisk, in which case multiple ActiveRecord classes will be generated.

---

--ns: string (defaults to 'app\models')
This is the namespace of the ActiveRecord class to be generated, e.g.,
app\models

---

--overwrite: boolean, 0 or 1 (defaults to 0)
whether to overwrite all existing code files when in non-interactive mode.
Defaults to false, meaning none of the existing code files will be overwritten.
This option is used only when `--interactive=0`.

---

--queryBaseClass: string (defaults to 'yii\db\ActiveQuery')
This is the base class of the new ActiveQuery class. It should be a fully
qualified namespaced class name.

---

--queryClass: string
This is the name of the ActiveQuery class to be generated. The class name
should not contain the namespace part as it is specified in "ActiveQuery
Namespace". You do not need to specify the class name if "Table Name" ends
with asterisk, in which case multiple ActiveQuery classes will be
generated.

---

--queryNs: string (defaults to 'app\models')
This is the namespace of the ActiveQuery class to be generated, e.g.,
app\models

---

--silent-exit-on-exception: boolean, 0 or 1
if true - script finish with `ExitCode::OK` in case of exception.
false - `ExitCode::UNSPECIFIED_ERROR`.
Default: `YII_ENV_TEST`

---

--singularize: boolean, 0 or 1 (defaults to 0)
This indicates whether the generated class names should be singularized.
For example, table names like some_tables will have class names SomeTable.

---

--standardizeCapitals: boolean, 0 or 1 (defaults to 0)
This indicates whether the generated class names should have standardized
capitals. For example, table names like SOME_TABLE or Other_Table will have
class names SomeTable and OtherTable, respectively. If not checked, the
same tables will have class names SOMETABLE and OtherTable instead.

---

--tableName (required): string
This is the name of the DB table that the new ActiveRecord class is
associated with, e.g. post. The table name may consist of the DB schema
part if needed, e.g. public.post. The table name may end with asterisk to
match multiple table names, e.g. tbl*\* will match tables who name starts
with tbl*. In this case, multiple ActiveRecord classes will be generated,
one for each matching table name; and the class names will be generated
from the matching characters. For example, table tbl_post will generate
Post class.

---

## --template: string (defaults to 'default')

--useSchemaName: boolean, 0 or 1 (defaults to 1)
This indicates whether to include the schema name in the ActiveRecord class
when it's auto generated. Only non default schema would be used.

---

--useTablePrefix: boolean, 0 or 1 (defaults to 0)
This indicates whether the table name returned by the generated
ActiveRecord class should consider the tablePrefix setting of the DB
connection. For example, if the table name is tbl*post and
tablePrefix=tbl*, the ActiveRecord class will return the table name as
{{%post}}.

---

## Yii2 GII CRUD

CRUD
################
yii gii/model --generateQuery=1 --generateRelationsFromCurrentSchema=1 --overwrite=1 --ns='backend\models' --modelClass='MlUPartialUrineText' --tableName='ml_u_partial_urine_text' --queryNs='backend\models\query' --queryClass='MlUPartialUrineTextQuery'

yii gii/crud  --modelClass='backend\models\MlUPartialUrineText' --controllerClass='backend\controllers\MlUPartialUrineTextController' --baseControllerClass='backend\controllers\AppController' --searchModelClass='backend\models\MlUPartialUrineTextSearch' --viewPath='backend/views/ml-u-partial-urine-text' --color=1

################
--

# yii gii/crud --modelClass='backend\models\LaudosScEletrocardiograma' --controllerClass='backend\controllers\LaudosScEletrocardiogramaController'
--baseControllerClass='common\controllers\AppController' --viewPath='backend/views/laudos-sc-eletrocardiograma' --color=1 --enablePjax=1

yii gii/model --generateQuery=1 --generateRelationsFromCurrentSchema=1 --overwrite=1 --ns='common\models' --modelClass='LaudosDiUsGestacionalText' --tableName='laudos_di_us_gestacional_text' --queryNs='backend\models\query' --queryClass='LaudosDiUsGestacionalTextQuery'

# yii gii/crud --modelClass='common\models\LaudosDiUsGestacionalText' --controllerClass='backend\controllers\LaudosDiUsGestacionalTextController' --baseControllerClass='backend\controllers\AppController' --searchModelClass='backend\models\LaudosDiUsGestacionalTextSearch' --viewPath='backend/views/laudos-di-us-gestacional-text' --color=1

## yii gii/crud --modelClass='common\models\Product' --controllerClass='backend_lalah\controllers\ProductsController' --baseControllerClass='backend_lalah\controllers\AppController' --searchModelClass='backend_lalah\models\search\ProductSearch' --viewPath='backend_lalah/views/products' --color=1

# yii gii/crud --modelClass='backend\models\LaudosMlPCoproparasitologicoIIText' --controllerClass='backend\controllers\LaudosMlPCoproparasitologicoIITextController' --baseControllerClass='backend\controllers\AppController' --searchModelClass='backend\models\LaudosMlPCoproparasitologicoIITextSearch' --viewPath='backend/views/laudos-ml-p-coproparasitologico-ii-text' --color=1

yii gii/crud --modelClass='atelier\models\Calendars' --controllerClass='atelier\controllers\CalendarController'
--baseControllerClass='common\controllers\AppController' --viewPath='atelier/views/calendar' --color=1 --enablePjax=1

DESCRIPTION
This generator generates a controller and views that implement CRUD
(Create, Read, Update, Delete) operations for the specified data model.

---

USAGE
yii gii/crud [...options...]

---

OPTIONS
--appconfig: string
custom application configuration file path.
If not set, default application configuration is used.

---

--baseControllerClass: string (defaults to 'yii\web\Controller')
This is the class that the new CRUD controller class will extend from. You
should provide a fully qualified class name, e.g., yii\web\Controller.

--color: boolean, 0 or 1
whether to enable ANSI color in the output.
If not set, ANSI color will only be enabled for terminals that support it.

--controllerClass (required): string
This is the name of the controller class to be generated. You should
provide a fully qualified namespaced class (e.g.
app\controllers\PostController), and class name should be in CamelCase with
an uppercase first letter. Make sure the class is using the same namespace
as specified by your application's controllerNamespace property.

--enableI18N: boolean, 0 or 1 (defaults to 0)
This indicates whether the generator should generate strings using Yii::t()
method. Set this to true if you are planning to make your application
translatable.

--enablePjax: boolean, 0 or 1 (defaults to 0)
This indicates whether the generator should wrap the GridView or ListView
widget on the index page with yii\widgets\Pjax widget. Set this to true if
you want to get sorting, filtering and pagination without page refreshing.

--help, -h: boolean, 0 or 1 (defaults to 0)
whether to display help information about current command.

--indexWidgetType: string (defaults to 'grid')
This is the widget type to be used in the index page to display list of the
models. You may choose either GridView or ListView

--interactive: boolean, 0 or 1 (defaults to 1)
whether to run the command interactively.

--messageCategory: string (defaults to 'app')
This is the category used by Yii::t() in case you enable I18N.

--modelClass (required): string
This is the BaseActiveRecord class associated with the table that CRUD will
be built upon. You should provide a fully qualified class name, e.g.,
app\models\Post.

--overwrite: boolean, 0 or 1 (defaults to 0)
whether to overwrite all existing code files when in non-interactive mode.
Defaults to false, meaning none of the existing code files will be overwritten.
This option is used only when `--interactive=0`.

--searchModelClass: string (defaults to '')
This is the name of the search model class to be generated. You should
provide a fully qualified namespaced class name, e.g.,
app\models\PostSearch.

--silent-exit-on-exception: boolean, 0 or 1
if true - script finish with `ExitCode::OK` in case of exception.
false - `ExitCode::UNSPECIFIED_ERROR`.
Default: `YII_ENV_TEST`

--strictInflector: boolean, 0 or 1 (defaults to 1)

--template: string (defaults to 'default')

--viewPath: string
Specify the directory for storing the view scripts for the controller. You
may use path alias here, e.g., /var/www/basic/controllers/views/post,
@app/views/post. If not set, it will default to @app/views/ControllerID
